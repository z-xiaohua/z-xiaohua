<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[单例模式（Singleton Pattern）]]></title>
    <url>%2F2018%2F05%2F02%2Fpattern-singleton%2F</url>
    <content type="text"><![CDATA[定义确保一个类只有一个实例，并提供全局访问点。 单例模式的各种实现方式1、线程不安全的懒加载单例模式线程不安全，严格意义上它并不算单例模式，不推荐使用 12345678910111213141516171819202122232425262728293031/** * 功能：线程不安全的懒加载单例模式 * Created by z-xiaohua on 2018/4/30. */public class ThreadUnsafeLazyLoadedSingleton &#123; // 用私有静态变量来保存唯一实例 private static ThreadUnsafeLazyLoadedSingleton instance; /** * 私有构造函数 */ private ThreadUnsafeLazyLoadedSingleton() &#123; // 防止通过反射调用的实例化情况 if (instance != null) &#123; throw new IllegalStateException(&quot;已经初始化&quot;); &#125; &#125; /** * 提供全局访问方法 * @return 唯一实例 */ public static ThreadUnsafeLazyLoadedSingleton getInstance()&#123; /* 当实例为空时，创建实例，反之返回实例*/ if(instance == null)&#123; instance = new ThreadUnsafeLazyLoadedSingleton(); &#125; return instance; &#125;&#125; 2、使用同步代码块实现的线程安全懒加载单例模式getInstance方法使用synchronized会造成严重的性能问题，不推荐使用 12345678910111213141516171819202122232425262728293031/** * 功能：使用同步代码块实现的线程安全懒加载单例模式 * Created by z-xiaohua on 2018/4/30. */public class SynchronizedThreadSafeLazyLoadedSingleton &#123; // 用私有静态变量来保存唯一实例 private static SynchronizedThreadSafeLazyLoadedSingleton instance; /** * 私有构造函数 */ private SynchronizedThreadSafeLazyLoadedSingleton() &#123; // 防止通过反射调用的实例化情况 if (instance != null) &#123; throw new IllegalStateException(&quot;已经初始化&quot;); &#125; &#125; /** * 提供全局访问方法 * @return 唯一实例 */ public static synchronized SynchronizedThreadSafeLazyLoadedSingleton getInstance()&#123; /* 当实例为空时，创建实例，反之返回实例*/ if(instance == null)&#123; instance = new SynchronizedThreadSafeLazyLoadedSingleton(); &#125; return instance; &#125;&#125; 3、使用双重检查加锁实现的线程安全懒加载单例模式对第2种方式的优化，只有第一次会同步，减少性能损耗，在JDK1.5之前的版本存在问题 1234567891011121314151617181920212223242526272829303132333435363738394041/** * 使用双重检查加锁实现的线程安全懒加载单例模式 * Created by z-xiaohua on 2018/4/30. */public class DoubleCheckLockingThreadSafeSingleton &#123; // 用私有静态变量来保存唯一实例,volatile很重要，用来确保变量初始化时多线程能正确地处理 private static volatile DoubleCheckLockingThreadSafeSingleton instance; /** * 私有构造函数 */ private DoubleCheckLockingThreadSafeSingleton() &#123; // 防止通过反射调用的实例化情况 if (instance != null) &#123; throw new IllegalStateException(&quot;已经初始化&quot;); &#125; &#125; /** * 提供全局访问方法 * * @return 唯一实例 */ public static DoubleCheckLockingThreadSafeSingleton getInstance() &#123; // 使用局部变量来缓存volatile变量值能增加25%性能 DoubleCheckLockingThreadSafeSingleton result = instance; // 第一重检查，用来挡住初次并发之后的线程，防止再次进入同步代码块，减少性能损耗 if (result == null) &#123; // 初次并发时会可能会有多个线程通过第一重检查，使用同步代码块确保一个线程执行完成后下一个线程才能进入 synchronized (DoubleCheckLockingThreadSafeSingleton.class) &#123; // 再次赋值局部变量 result = instance; if (result == null) &#123; // 第二重检查 instance = result = new DoubleCheckLockingThreadSafeSingleton(); &#125; &#125; &#125; return result; &#125;&#125; 4、饿汉单例模式（急切）类加载时初始化instance，如果单例占用的资源很少，并且也不依赖于其他数据，不在在乎资源浪费，可以使用1234567891011121314151617181920212223/** * 功能：饿汉单例模式（急切） * Created by z-xiaohua on 2018/4/30. */public class EagerlySingleton &#123; // 类加载时进行初始化 private static EagerlySingleton instance = new EagerlySingleton(); /** * 私有构造函数 */ private EagerlySingleton() &#123; &#125; /** * 提供全局访问方法 * @return 唯一实例 */ public static EagerlySingleton getInstance()&#123; return instance; &#125;&#125; 5、使用静态内部类实现的懒加载单例模式对饿汉式的优化，使支持懒加载。静态内部类使用饿汉式实现，又因为静态内部类只在getInstance()中被使用，所以getInstance() 方法第一次被调用时才会初始化静态内部类。 1234567891011121314151617181920212223242526272829303132/** * 功能：使用静态内部类实现的懒加载单例模式 * Created by z-xiaohua on 2018/4/30. */public class StaticInnerClassLazyLoadedSingleton &#123; /** * 私有构造函数 */ private StaticInnerClassLazyLoadedSingleton() &#123; &#125; /** * 提供全局访问方法 * * @return 唯一实例 */ public static StaticInnerClassLazyLoadedSingleton getInstance() &#123; return SingletonHolder.INSTANCE; &#125; /** * 静态内部类 */ private static class SingletonHolder &#123; private static final StaticInnerClassLazyLoadedSingleton INSTANCE = new StaticInnerClassLazyLoadedSingleton(); &#125;&#125;使用静态内部类实现的懒加载单例模式对 6、使用枚举实现单例模式三个词概括该方式：简单、高效、安全，Effective Java 作者 Josh Bloch 提倡的方式1234567/** * 功能：使用枚举实现单例模式 * Created by z-xiaohua on 2018/4/30. */public enum EnumSingleton &#123; INSTANCE&#125; 结论一般情况下，不建议使用第1种和第2种懒汉方式，建议使用第4种饿汉方式，在要明确实现懒加载时，使用第5种静态内部类方式。如果涉及到反序列化创建对象时，可以尝试使用第6种枚举方式。如果有其他特殊的需求，可以考虑使用第3种双检锁方式。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[整理Git常用命令]]></title>
    <url>%2F2018%2F04%2F28%2Ftidy-git%2F</url>
    <content type="text"><![CDATA[测试使用ssh连接到github 1ssh -T git@github.com 设置Git账号信息 12git config --global user.name &quot;z-xiaohua&quot;git config --global user.email &quot;my email&quot; 忽略文件和文件夹不提交 1#在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可 创建版本库 12git clone &lt;url&gt; #克隆远程仓库代码到本地git init #初始化本地版本库 修改和提交 123456789git status #查看状态git diff #查看变更内容git add . #跟踪所有改动过的文件git add &lt;file&gt; #跟踪指导的文件git mv &lt;old&gt; &lt;new&gt; #文件改名git rm &lt;file&gt; #删除文件git rm --cached &lt;file&gt; #停止跟踪文件但不删除git commit -m &quot;这里是注释&quot; #提交当前工作空间的修改内容到本地仓库git commit --amend修改最后一次提交 查看提交历史 123git log #查看提交历史git log -p &lt;file&gt; #查看指定文件的提交历史git blame &lt;file&gt; #以列表方式查看指定文件的提交历史 撤销 123git reset --hard HEAD #撤销工作目录中所有未提交文件的修改内容git checkout HEAD &lt;file&gt; #撤销指定的未提交文件的修改内容git revert &lt;commit&gt; #撤销指定的提交 分支与标签 1234567git branch #显示所有本地分支git checkout &lt;branch/tag&gt; #切换到指定分支或标签git branch &lt;new-branch&gt; #创建本地分支git branch -d &lt;branch&gt; #删除本地分支git tag #列出所有本地标签git tag &lt;tagname&gt; #基于最新提交创建标签git tag -d &lt;tagname&gt; #删除标签 合并和衍合 123git cherry-pick &lt;commit&gt; #合并指定commit到当前分支git merge &lt;branch&gt; #合并指定分支到当前分支git rebase &lt;branch&gt; #衍合指定分支到当前分支 远程操作 12345678git remote -v #查看远程版本库信息git remote show &lt;remote&gt; #查看指定远程版本库信息git remote add &lt;remote&gt; &lt;url&gt; #添加远程版本库git fetch &lt;remote&gt; #从远程库获取代码git pull &lt;remote&gt; &lt;branch&gt; #下载代码及快速合并git push &lt;remote&gt; &lt;branch&gt; #上传代码及快速合并git push &lt;remote&gt; :&lt;branch/tag-name&gt;#删除远程分支或标签git push --tags #上传所有标签]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos 7.2安装tomcat]]></title>
    <url>%2F2018%2F04%2F09%2Flinux-install-tomcat%2F</url>
    <content type="text"><![CDATA[安装1.下载tomcat下载地址：http://tomcat.apache.org/download-80.cgi 2.解压压缩包1[root@VM_119_83_centos opt]# tar -zxv -f apache-tomcat-8.0.50.tar.gz 3.启动tomcat1234567[root@VM_119_83_centos bin]# sh startup.shUsing CATALINA_BASE: /opt/tomcatUsing CATALINA_HOME: /opt/tomcatUsing CATALINA_TMPDIR: /opt/tomcat/tempUsing JRE_HOME: /usr/java/jdk1.8.0_161Using CLASSPATH: /opt/tomcat/bin/bootstrap.jar:/opt/tomcat/tomcat/bin/tomcat-juli.jarTomcat started. 4.查看日志1[root@VM_119_83_centos tomcat]# tail -f logs/catalina.out 5.访问tomcathttp://193.112.63.15:8080/ 能看到tomcat的管理界面就是安装成功 配置tomcat1.将tomcat配置成守护进程将tomcat配置成守护进程需要借助apache-commons-daemon项目的jsvc工具， 该工具通常包含在tomcat包中（bin/commons-daemon-native.tar.gz） 配置CATALINA_HOME环境变量1[root@VM_119_83_centos opt]# export CATALINA_HOME=/opt/tomcat 编译安装jsvc123456789101112131415161718192021[root@VM_119_83_centos bin]# tar -xvf commons-daemon-native.tar.gz[root@VM_119_83_centos bin]# cd commons-daemon-1.1.0-native-src/unix/[root@VM_119_83_centos unix]# ./configure*** Current host ***checking build system type... x86_64-pc-linux-gnuchecking host system type... x86_64-pc-linux-gnuchecking cached host system type... ok*** C-Language compilation tools ***checking for gcc... nochecking for cc... nochecking for cl.exe... noconfigure: error: in `/opt/tomcat/bin/commons-daemon-1.1.0-native-src/unix&apos;:configure: error: no acceptable C compiler found in $PATHSee `config.log&apos; for more details[root@VM_119_83_centos unix]# yum -y install gcc[root@VM_119_83_centos unix]# ./configure[root@VM_119_83_centos unix]# make[root@VM_119_83_centos unix]# cp jsvc ../..[root@VM_119_83_centos bin]# rm -rf commons-daemon-1.1.0-native-src/ 创建运行tomcat的用户tomcat下面的命令会创建一个专门的用户来运行 Tomcat 实例，并会把 / opt/tomcat 目录及其文件的所有权赋予新创建的 tomcat 用户。12[root@VM_119_83_centos ~]# useradd -r -s /sbin/nologin tomcat[root@VM_119_83_centos ~]# chown -R tomcat: /opt/tomcat 创建系统服务创建一个名为 tomcat.service 的系统服务脚本。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354[root@VM_119_83_centos ~]# vim /usr/lib/systemd/system/tomcat.service[Unit]Description=Apache Tomcat 8 Web Application ContainerAfter=network.target[Service]Type=forkingPIDFile=/var/run/tomcat.pidEnvironment=CATALINA_PID=/var/run/tomcat.pidEnvironment=JAVA_HOME=/usr/java/jdk1.8.0_161/Environment=CATALINA_HOME=/opt/tomcatEnvironment=CATALINA_BASE=/opt/tomcatEnvironment=CATALINA_OPTS=ExecStart=/opt/tomcat/bin/jsvc \ -Dcatalina.home=$&#123;CATALINA_HOME&#125; \ -Dcatalina.base=$&#123;CATALINA_BASE&#125; \ -cp $&#123;CATALINA_HOME&#125;/bin/commons-daemon.jar:$&#123;CATALINA_HOME&#125;/bin/bootstrap.jar:$&#123;CATALINA_HOME&#125;/bin/tomcat-juli.jar \ -user tomcat \ -java-home $&#123;JAVA_HOME&#125; \ -pidfile /var/run/tomcat.pid \ -errfile SYSLOG \ -outfile SYSLOG \ $CATALINA_OPTS \ org.apache.catalina.startup.BootstrapExecStop=/opt/tomcat/bin/jsvc \ -pidfile /var/run/tomcat.pid \ -stop \ org.apache.catalina.startup.Bootstrap[Install]WantedBy=multi-user.target~~~~~~~~~~~~~~~~~~~~&quot;/usr/lib/systemd/system/tomcat.service&quot; [New] 32L, 1017C written 开发者可以修改 CATALINA_OPTS 选项以满足自己的需要。 让 Tomcat 服务在启动后就自动运行12[root@VM_119_83_centos ~]# systemctl enable /usr/lib/systemd/system/tomcat.serviceCreated symlink from /etc/systemd/system/multi-user.target.wants/tomcat.service to /usr/lib/systemd/system/tomcat.service. 使用下面的命令启动、重启、停止 Tomcat 服务 $ systemctl start tomcat $ systemctl stop tomcat $ systemctl restart tomcat $ systemctl status tomcat 2.tomcat安全配置隐藏版本信息当tomcat出现404或其它错误时，就会显示当前版本信息，为避免针对某一版本的攻击，我们应该将其隐藏或伪装 12345[root@VM_119_83_centos ~]# cd /opt/tomcat/lib/[root@VM_119_83_centos ~]# mkdir -p org/apache/catalina/util[root@VM_119_83_centos ~]# cd org/apache/catalina/util[root@VM_119_83_centos ~]# vim ServerInfo.propertieserver.info=nolinux 修改完成之后，重启tomcat即可看到效果！ 禁用tomcat管理页面删除webapps目录下的所有文件，还涉及到管理页面的2个配置文件host-manager.xml和manager.xml也要删除，这两个文件在tomcat安装 目录下的conf/Catalina/localhost目录下。 tomcat内存优化tomcat内存优化主要是对tomcat启动参数优化，我们可以在tomcat启动脚本catalina.sh中设置JAVA——OPTS参数。 12# OS specific support. $var _must_ be set to either true or false.JAVA_OPTS=&apos;-Xms512m -Xmx1024m -XX:PermSize=256M -XX:MaxNewSize=256m -XX:MaxPermSize=256m&apos;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos 7.2安装mysql]]></title>
    <url>%2F2018%2F04%2F09%2Flinux-install-mysql%2F</url>
    <content type="text"><![CDATA[1.查看Linux发行版本cat /etc/redhat-release 12[root@VM_119_83_centos ~]# cat /etc/redhat-releaseCentOS Linux release 7.2.1511 (Core) 2.查看当前可用的mysql安装资源12345[root@VM_119_83_centos ~]# rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpmRetrieving http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpmPreparing... ################################# [100%]Updating / installing... 1:mysql-community-release-el7-5 ################################# [100%] 1234[root@VM_119_83_centos ~]# yum repolist enabled | grep &quot;mysql.*-community.*&quot;mysql-connectors-community/x86_64 MySQL Connectors Community 45mysql-tools-community/x86_64 MySQL Tools Community 59mysql56-community/x86_64 MySQL 5.6 Community Server 378 从上面的列表可以看出，mysql56-community/x86_64和MySQL 5.6 Community Server可以使用。 因此，我们就可以直接用yum方式安装了MySQL5.6版本了。 3.安装mysql1yum -y install mysql-community-server 等待下载安装的完成 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135Loaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfileResolving Dependencies--&gt; Running transaction check---&gt; Package mysql-community-server.x86_64 0:5.6.39-2.el7 will be installed--&gt; Processing Dependency: mysql-community-common(x86-64) = 5.6.39-2.el7 for package: mysql-community-server-5.6.39-2.el7.x86_64--&gt; Processing Dependency: mysql-community-client(x86-64) &gt;= 5.6.10 for package: mysql-community-server-5.6.39-2.el7.x86_64--&gt; Processing Dependency: perl(Data::Dumper) for package: mysql-community-server-5.6.39-2.el7.x86_64--&gt; Processing Dependency: perl(DBI) for package: mysql-community-server-5.6.39-2.el7.x86_64--&gt; Processing Dependency: libnuma.so.1(libnuma_1.2)(64bit) for package: mysql-community-server-5.6.39-2.el7.x86_64--&gt; Processing Dependency: libnuma.so.1(libnuma_1.1)(64bit) for package: mysql-community-server-5.6.39-2.el7.x86_64--&gt; Processing Dependency: libnuma.so.1()(64bit) for package: mysql-community-server-5.6.39-2.el7.x86_64--&gt; Running transaction check---&gt; Package mysql-community-client.x86_64 0:5.6.39-2.el7 will be installed--&gt; Processing Dependency: mysql-community-libs(x86-64) &gt;= 5.6.10 for package: mysql-community-client-5.6.39-2.el7.x86_64---&gt; Package mysql-community-common.x86_64 0:5.6.39-2.el7 will be installed---&gt; Package numactl-libs.x86_64 0:2.0.9-6.el7_2 will be installed---&gt; Package perl-DBI.x86_64 0:1.627-4.el7 will be installed--&gt; Processing Dependency: perl(RPC::PlServer) &gt;= 0.2001 for package: perl-DBI-1.627-4.el7.x86_64--&gt; Processing Dependency: perl(RPC::PlClient) &gt;= 0.2000 for package: perl-DBI-1.627-4.el7.x86_64---&gt; Package perl-Data-Dumper.x86_64 0:2.145-3.el7 will be installed--&gt; Running transaction check---&gt; Package mariadb-libs.x86_64 1:5.5.52-1.el7 will be obsoleted---&gt; Package mysql-community-libs.x86_64 0:5.6.39-2.el7 will be obsoleting---&gt; Package perl-PlRPC.noarch 0:0.2020-14.el7 will be installed--&gt; Processing Dependency: perl(Net::Daemon) &gt;= 0.13 for package: perl-PlRPC-0.2020-14.el7.noarch--&gt; Processing Dependency: perl(Net::Daemon::Test) for package: perl-PlRPC-0.2020-14.el7.noarch--&gt; Processing Dependency: perl(Net::Daemon::Log) for package: perl-PlRPC-0.2020-14.el7.noarch--&gt; Processing Dependency: perl(Compress::Zlib) for package: perl-PlRPC-0.2020-14.el7.noarch--&gt; Running transaction check---&gt; Package perl-IO-Compress.noarch 0:2.061-2.el7 will be installed--&gt; Processing Dependency: perl(Compress::Raw::Zlib) &gt;= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch--&gt; Processing Dependency: perl(Compress::Raw::Bzip2) &gt;= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch---&gt; Package perl-Net-Daemon.noarch 0:0.48-5.el7 will be installed--&gt; Running transaction check---&gt; Package perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 will be installed---&gt; Package perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved========================================================================================================================= Package Arch Version Repository Size=========================================================================================================================Installing: mysql-community-libs x86_64 5.6.39-2.el7 mysql56-community 2.0 M replacing mariadb-libs.x86_64 1:5.5.52-1.el7 mysql-community-server x86_64 5.6.39-2.el7 mysql56-community 59 MInstalling for dependencies: mysql-community-client x86_64 5.6.39-2.el7 mysql56-community 19 M mysql-community-common x86_64 5.6.39-2.el7 mysql56-community 257 k numactl-libs x86_64 2.0.9-6.el7_2 os 29 k perl-Compress-Raw-Bzip2 x86_64 2.061-3.el7 os 32 k perl-Compress-Raw-Zlib x86_64 1:2.061-4.el7 os 57 k perl-DBI x86_64 1.627-4.el7 os 802 k perl-Data-Dumper x86_64 2.145-3.el7 os 47 k perl-IO-Compress noarch 2.061-2.el7 os 260 k perl-Net-Daemon noarch 0.48-5.el7 os 51 k perl-PlRPC noarch 0.2020-14.el7 os 36 kTransaction Summary=========================================================================================================================Install 2 Packages (+10 Dependent packages)Total download size: 82 MDownloading packages:warning: /var/cache/yum/x86_64/7/mysql56-community/packages/mysql-community-common-5.6.39-2.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPublic key for mysql-community-common-5.6.39-2.el7.x86_64.rpm is not installed(1/12): mysql-community-common-5.6.39-2.el7.x86_64.rpm | 257 kB 00:00:02(2/12): mysql-community-libs-5.6.39-2.el7.x86_64.rpm | 2.0 MB 00:00:02(3/12): numactl-libs-2.0.9-6.el7_2.x86_64.rpm | 29 kB 00:00:00(4/12): perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64.rpm | 32 kB 00:00:00(5/12): perl-Compress-Raw-Zlib-2.061-4.el7.x86_64.rpm | 57 kB 00:00:00(6/12): perl-Data-Dumper-2.145-3.el7.x86_64.rpm | 47 kB 00:00:00(7/12): perl-IO-Compress-2.061-2.el7.noarch.rpm | 260 kB 00:00:00(8/12): perl-Net-Daemon-0.48-5.el7.noarch.rpm | 51 kB 00:00:00(9/12): perl-PlRPC-0.2020-14.el7.noarch.rpm | 36 kB 00:00:00(10/12): perl-DBI-1.627-4.el7.x86_64.rpm | 802 kB 00:00:00(11/12): mysql-community-client-5.6.39-2.el7.x86_64.rpm | 19 MB 00:00:12(12/12): mysql-community-server-5.6.39-2.el7.x86_64.rpm | 59 MB 00:14:27-------------------------------------------------------------------------------------------------------------------------Total 97 kB/s | 82 MB 00:14:32Retrieving key from file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysqlImporting GPG key 0x5072E1F5: Userid : &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; Fingerprint: a4a9 4068 76fc bd3c 4567 70c8 8c71 8d3b 5072 e1f5 Package : mysql-community-release-el7-5.noarch (installed) From : file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysqlRunning transaction checkRunning transaction testTransaction test succeededRunning transactionWarning: RPMDB altered outside of yum. Installing : perl-Data-Dumper-2.145-3.el7.x86_64 1/13 Installing : mysql-community-common-5.6.39-2.el7.x86_64 2/13 Installing : mysql-community-libs-5.6.39-2.el7.x86_64 3/13 Installing : mysql-community-client-5.6.39-2.el7.x86_64 4/13 Installing : numactl-libs-2.0.9-6.el7_2.x86_64 5/13 Installing : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64 6/13 Installing : perl-Net-Daemon-0.48-5.el7.noarch 7/13 Installing : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64 8/13 Installing : perl-IO-Compress-2.061-2.el7.noarch 9/13 Installing : perl-PlRPC-0.2020-14.el7.noarch 10/13 Installing : perl-DBI-1.627-4.el7.x86_64 11/13 Installing : mysql-community-server-5.6.39-2.el7.x86_64 12/13 Erasing : 1:mariadb-libs-5.5.52-1.el7.x86_64 13/13 Verifying : mysql-community-server-5.6.39-2.el7.x86_64 1/13 Verifying : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64 2/13 Verifying : perl-Net-Daemon-0.48-5.el7.noarch 3/13 Verifying : mysql-community-common-5.6.39-2.el7.x86_64 4/13 Verifying : perl-Data-Dumper-2.145-3.el7.x86_64 5/13 Verifying : mysql-community-libs-5.6.39-2.el7.x86_64 6/13 Verifying : perl-PlRPC-0.2020-14.el7.noarch 7/13 Verifying : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64 8/13 Verifying : numactl-libs-2.0.9-6.el7_2.x86_64 9/13 Verifying : perl-DBI-1.627-4.el7.x86_64 10/13 Verifying : perl-IO-Compress-2.061-2.el7.noarch 11/13 Verifying : mysql-community-client-5.6.39-2.el7.x86_64 12/13 Verifying : 1:mariadb-libs-5.5.52-1.el7.x86_64 13/13Installed: mysql-community-libs.x86_64 0:5.6.39-2.el7 mysql-community-server.x86_64 0:5.6.39-2.el7Dependency Installed: mysql-community-client.x86_64 0:5.6.39-2.el7 mysql-community-common.x86_64 0:5.6.39-2.el7 numactl-libs.x86_64 0:2.0.9-6.el7_2 perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 perl-DBI.x86_64 0:1.627-4.el7 perl-Data-Dumper.x86_64 0:2.145-3.el7 perl-IO-Compress.noarch 0:2.061-2.el7 perl-Net-Daemon.noarch 0:0.48-5.el7 perl-PlRPC.noarch 0:0.2020-14.el7Replaced: mariadb-libs.x86_64 1:5.5.52-1.el7Complete![root@VM_119_83_centos ~]# 4. MySQL安装完成后，进行相关配置安装成功后，将其加入开机启动1[root@VM_119_83_centos ~]# systemctl enable mysqld 启动mysql服务进程 1[root@VM_119_83_centos ~]# systemctl start mysqld 配置mysql（设置密码等） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768[root@VM_119_83_centos ~]# mysql_secure_installationNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!In order to log into MySQL to secure it, we&apos;ll need the currentpassword for the root user. If you&apos;ve just installed MySQL, andyou haven&apos;t set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none):OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MySQLroot user without the proper authorisation.Set root password? [Y/n] y [设置root用户密码]New password:Re-enter new password:Password updated successfully!Reloading privilege tables.. ... Success!By default, a MySQL installation has an anonymous user, allowing anyoneto log into MySQL without having to have a user account created forthem. This is intended only for testing, and to make the installationgo a bit smoother. You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] y [删除匿名用户] ... Success!Normally, root should only be allowed to connect from &apos;localhost&apos;. Thisensures that someone cannot guess at the root password from the network.Disallow root login remotely? [Y/n] y [禁止root远程登录] ... Success!By default, MySQL comes with a database named &apos;test&apos; that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] y [删除test数据库] - Dropping test database...ERROR 1008 (HY000) at line 1: Can&apos;t drop database &apos;test&apos;; database doesn&apos;t exist ... Failed! Not critical, keep moving... - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] y [刷新权限] ... Success!All done! If you&apos;ve completed all of the above steps, your MySQLinstallation should now be secure.Thanks for using MySQL!Cleaning up...]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lombok]]></title>
    <url>%2F2018%2F01%2F10%2Ftidy-lombok%2F</url>
    <content type="text"><![CDATA[lombok简介Lombok通过注解形式减少臃肿代码如Getter/Setter方法，实现原理是在编译源码的时候生成对应的方法。 官方地址：https://projectlombok.org/ github地址：https://github.com/rzwitserloot/lombok 使用步骤1.安装插件 IntelliJ IDEA 插件安装： eclipse 插件安装： lombok官网下载最新的包 运行Lombok.jar: java -jar D:\lombok.jar 确认完eclipse的安装路径后，点击install/update按钮，即可安装完成 安装完成之后，请确认eclipse安装路径下是否多了一个lombok.jar包，并且其配置文件eclipse.ini中是否 添加了如下内容: 1-javaagent:lombok.jar 重启eclipse 2.引入jar12345&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.18&lt;/version&gt;&lt;/dependency&gt; 3.使用 常用注解官方文档 @NonNull可以帮助我们避免空指针，用在成员方法或者构造方法的参数前面，会自动产生一个关于此参数的非空检查，如果参数为空，则抛出一个空指针异常 @Cleanup自动帮我们调用close()方法，用在变量前面，可以保证此变量代表的资源会被自动关闭，默认是调用资源的close()方法，如果该资源有其它关闭方法，可使用@Cleanup(“methodName”)来指定要调用的方法 @Getter/@Setter自动生成Getter/Setter方法，用在成员变量前面，默认为public，可以通过AccessLevel枚举类改变修饰符，还可以用在类上，可以为类的所有非静态成员变量生成Getter/Setter方法 @ToString自动生成toString()方法，可以通过exclude属性排除不需要toString的成员变量 @EqualsAndHashCode生成hashCode()和equals()方法，可以通过exclude属性排除不需要toString的成员变量 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor自动生成构造函数，用在类上的，@NoArgsConstructor无参的构造方法，@AllArgsConstructor包含所有参数的构造方法，@RequiredArgsConstructor则使用类中所有带有@NonNull注解的或者带有final修饰的成员变量生成对应的构造方法，如果类中含有final修饰的成员变量，是无法使用@NoArgsConstructor注解的 @Data相当于增加以下注解 @ToString, @EqualsAndHashCode @Getter @Setter 所有非final的变量 @RequiredArgsConstructor @Value和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法 @Builder为你的类生成复杂的构建器API，用在类上 1ClassName.builder().variable1(&quot;变量1的值&quot;).variable2(&quot;变量2的值&quot;).build(); @SneakyThrows将方法中的代码用try-catch语句包裹起来，可以指定抛出的异常类 @Synchronized给方法加上同步锁 @Getter(lazy=true)懒加载 @Log自动生成日志对象1234567891011121314@CommonsLogprivate static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);@JBossLogprivate static final org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class);@Logprivate static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());@Log4jprivate static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class);@Log4j2private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);@Slf4jprivate static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);@XSlf4jprivate static final org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[整理IntelliJ IDEA使用技巧]]></title>
    <url>%2F2018%2F01%2F10%2Ftidy-idea%2F</url>
    <content type="text"><![CDATA[常用快捷键 Ctrl + Space 代码提示（会和中文输入法的快捷键冲突，建议改成Ctrl + / ） Ctrl + N 类文件查找 Ctrl + Shift + N 在全部文件中查找 Ctrl+Shift+Alt+N，查找类中的方法或变量 Ctrl + B 跳转到定义处 Ctrl + Alt + B 跳转到方法实现处 Ctrl + Alt + Right/Left 在编辑过的代码位置之间跳转（前进/后退） Ctrl + Alt + T 用来围绕选中的代码行（包括if、while、try catch等） Ctrl + / 和 Ctrl + Shift + / 注释/反注释指定的语句 F2/Shift + F2 跳转到下/上一个错误语句处 Shift + F6 提供对方法、变量的重命名 Ctrl + Alt + L 根据模板格式化选择的代码 Ctrl + Alt + I 将选中的代码进行自动缩进编排 Ctrl + Alt + O 优化import Ctrl + ]/[ 跳转到代码块结束/开始处 Ctrl+G（跳转到指定行） Ctrl+F4（关闭当前编辑页面） Alt+Shift+Up/Down，上/下移一行 Alt+Shift+C，最近的更改 Ctrl+J，自动代码（例如：serr） Ctrl+Shift+U，大小写转化 Ctrl+Alt+Shift+T，弹出重构菜单 Ctrl + F12 ，查询类中的方法 Ctrl + T ， 打开Update Project窗口，可切换svn分支 Ctrl + E , 打开最新打开的文件 Ctrl + Alt + M 重构，抽取方法 常用插件 Free Mybatis plugin Lombok plugin 常用设置 皮肤设置：Appearance &amp; Behavior &gt; Appearance &gt; theme 字体样式 代码提示忽略大小写 代码提示快捷键改为Alt + 斜杠 去除拼写检查 全局显示行数 类/方法注释 implements Serializable时提醒插入serialVersionUID]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
</search>
